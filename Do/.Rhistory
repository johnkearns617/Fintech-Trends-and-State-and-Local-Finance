library(KFAS)
library(xts)
library(parallelly)
library(parallel)
library(mFilter)
library(fredr)
library(forecast)
library(glmnet)
library(caret)
library(tseries)
library(midasr)
# load data
monthly_data = read_csv(paste0(data_folder,"Processing/monthly_data.csv"))
weekly_data = read_csv(paste0(data_folder,"Processing/weekly_data.csv"))
quarterly_data = read_csv(paste0(data_folder,"Processing/quarterly_data.csv"))
View(quarterly_data)
-#folder_output <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/Output/"
# Packages ----------------------------------------------------------------------
library(tidyverse)
folder <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/"
folder_data <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/Data/"
source(paste0(folder,"Do/AS 1 state pulls.R"))
source(paste0(folder,"Do/AS 2 clean and estimate.R"))
# Graph differences, May 2022 Update  -------------------------------------------------------------
graph <- estimates %>%
select(Period, bartik_pmt_may20, bartik_pmt_feb21, bartik_pmt_may22, cvtax_shortfall_may20, cvtax_shortfall_feb21, cvtax_shortfall_may22)
order <- seq(1, 14, 1) %>% tbl_df() %>% rename(order = value)
graph <- bind_cols(order, graph) %>%
filter(order > 4)
graph <- graph %>%
gather(key = "series", "shortfall", 3:8)
graph <- graph %>% # categories
mutate(paper = ifelse(str_detect(series, "bartik"), "Bartik (2020)\nUses unemployment data", "Clemens and Veuger (2020b)\nUses national income data"),
forecast = ifelse(str_detect(series, "may20"), "May 2020\nForecast",
ifelse(str_detect(series, "jul20"), "July 2020\nForecast",
ifelse(str_detect(series, "feb21"), "February 2021\nForecast", "May 2022\nActual"))))
graph <- graph %>% # units
mutate(shrtfl_billions = shortfall / 1000000000,
forecast_num = ifelse(forecast == "May 2020\nForecast", 2,
ifelse(forecast == "July 2020\nForecast", 4,
ifelse(forecast == "February 2021\nForecast", 3,
ifelse(forecast == "July 2021\nForecast", 5,
ifelse(forecast=="May 2022\nActual",6,NA))))))
comp_graph <- ggplot(data = graph, aes(x = order, y = shrtfl_billions, col = paper, linetype = as.factor(forecast_num)))+
geom_line()+
scale_linetype_manual(values = c("solid", "longdash", "dotdash", "dotted"), labels = c("May 2022 Actual", "May 2020", "Feb. 2021", "July 2021"), name = "CBO Forecast")+
scale_color_manual(values = c("#FB0023", "#008CCC"), labels = c("Bartik (2020)", "Clemens and Veuger (2020b)"), name = "Estimate")+
scale_x_continuous(breaks = c(6, 8, 10, 12, 14), labels = c("2020Q2", "2020Q4", "2021Q2", "2021Q4", "2022Q2"))+
geom_hline(yintercept = 0)+
xlab("")+
ylab("Estimated Shortfall (Billions USD)")+
theme_classic()+
guides(color = guide_legend(order = 1),linetype = guide_legend(order = 2))+
scale_y_continuous(breaks = c(0, -35, -70, -105, -140,-175,-210), labels = c("$0", "-$35", "-$70", "-$105", "-$140","-$175","-$210"))
comp_graph
## AS Figure 4 code
## Phil Hoxie
## July 6, 2021
# Folder -----------------------------------------------------------------------
folder <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/"
folder_data <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/Data/"
#folder_output <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/Output/"
# Packages ----------------------------------------------------------------------
library(tidyverse)
source(paste0(folder,"Do/AS 1 state pulls.R"))
source(paste0(folder,"Do/AS 2 clean and estimate.R"))
# Graph differences, May 2022 Update  -------------------------------------------------------------
graph <- estimates %>%
select(Period, bartik_pmt_may20, bartik_pmt_feb21, bartik_pmt_may22, cvtax_shortfall_may20, cvtax_shortfall_feb21, cvtax_shortfall_may22)
order <- seq(1, 14, 1) %>% tbl_df() %>% rename(order = value)
graph <- bind_cols(order, graph) %>%
filter(order > 4)
graph <- graph %>%
gather(key = "series", "shortfall", 3:8)
graph <- graph %>% # categories
mutate(paper = ifelse(str_detect(series, "bartik"), "Bartik (2020)\nUses unemployment data", "Clemens and Veuger (2020b)\nUses national income data"),
forecast = ifelse(str_detect(series, "may20"), "May 2020\nForecast",
ifelse(str_detect(series, "jul20"), "July 2020\nForecast",
ifelse(str_detect(series, "feb21"), "February 2021\nForecast", "May 2022\nActual"))))
graph <- graph %>% # units
mutate(shrtfl_billions = shortfall / 1000000000,
forecast_num = ifelse(forecast == "May 2020\nForecast", 2,
ifelse(forecast == "July 2020\nForecast", 4,
ifelse(forecast == "February 2021\nForecast", 3,
ifelse(forecast == "July 2021\nForecast", 5,
ifelse(forecast=="May 2022\nActual",6,NA))))))
comp_graph <- ggplot(data = graph, aes(x = order, y = shrtfl_billions, col = paper, linetype = as.factor(forecast_num)))+
geom_line()+
scale_linetype_manual(values = c("solid", "longdash", "dotdash", "dotted"), labels = c("May 2022 Actual", "May 2020", "Feb. 2021", "July 2021"), name = "CBO Forecast")+
scale_color_manual(values = c("#FB0023", "#008CCC"), labels = c("Bartik (2020)", "Clemens and Veuger (2020b)"), name = "Estimate")+
scale_x_continuous(breaks = c(6, 8, 10, 12, 14), labels = c("2020Q2", "2020Q4", "2021Q2", "2021Q4", "2022Q2"))+
geom_hline(yintercept = 0)+
xlab("")+
ylab("Estimated Shortfall (Billions USD)")+
theme_classic()+
guides(color = guide_legend(order = 1),linetype = guide_legend(order = 2))+
scale_y_continuous(breaks = c(0, -35, -70, -105, -140,-175,-210), labels = c("$0", "-$35", "-$70", "-$105", "-$140","-$175","-$210"))
comp_graph
folder <- "C:/Users/16094/Documents/Year 1 - Princeton/Fall 2022/Fintech/Project/Fintech-Trends-and-State-and-Local-Finance/"
folder_data <- "C:/Users/16094/Documents/Year 1 - Princeton/Fall 2022/Fintech/Project/Fintech-Trends-and-State-and-Local-Finance/Data/"
#folder_output <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/Output/"
# Packages ----------------------------------------------------------------------
library(tidyverse)
source(paste0(folder,"Do/AS 1 state pulls.R"))
source(paste0(folder,"Do/AS 2 clean and estimate.R"))
graph <- estimates %>%
select(Period, bartik_pmt_may20, bartik_pmt_feb21, bartik_pmt_may22, cvtax_shortfall_may20, cvtax_shortfall_feb21, cvtax_shortfall_may22)
order <- seq(1, 14, 1) %>% tbl_df() %>% rename(order = value)
graph <- bind_cols(order, graph) %>%
filter(order > 4)
graph <- graph %>%
gather(key = "series", "shortfall", 3:8)
graph <- graph %>% # categories
mutate(paper = ifelse(str_detect(series, "bartik"), "Bartik (2020)\nUses unemployment data", "Clemens and Veuger (2020b)\nUses national income data"),
forecast = ifelse(str_detect(series, "may20"), "May 2020\nForecast",
ifelse(str_detect(series, "jul20"), "July 2020\nForecast",
ifelse(str_detect(series, "feb21"), "February 2021\nForecast", "May 2022\nActual"))))
graph <- graph %>% # units
mutate(shrtfl_billions = shortfall / 1000000000,
forecast_num = ifelse(forecast == "May 2020\nForecast", 2,
ifelse(forecast == "July 2020\nForecast", 4,
ifelse(forecast == "February 2021\nForecast", 3,
ifelse(forecast == "July 2021\nForecast", 5,
ifelse(forecast=="May 2022\nActual",6,NA))))))
View(graph)
ggplot(data = graph, aes(x = order, y = shrtfl_billions, col = paper, linetype = as.factor(forecast_num)))+
geom_line()+
scale_linetype_manual(values = c("solid", "longdash", "dotdash", "dotted"), labels = c("May 2022 Actual", "May 2020", "Feb. 2021", "July 2021"), name = "CBO Forecast")+
scale_color_manual(values = c("#FB0023", "#008CCC"), labels = c("Bartik (2020)", "Clemens and Veuger (2020b)"), name = "Estimate")+
scale_x_continuous(breaks = c(6, 8, 10, 12, 14), labels = c("2020Q2", "2020Q4", "2021Q2", "2021Q4", "2022Q2"))+
geom_hline(yintercept = 0)+
xlab("")+
ylab("Estimated Shortfall (Billions USD)")+
theme_classic()+
guides(color = guide_legend(order = 1),linetype = guide_legend(order = 2))+
scale_y_continuous(breaks = c(0, -35, -70, -105, -140,-175,-210), labels = c("$0", "-$35", "-$70", "-$105", "-$140","-$175","-$210"))
ggplot(data = graph %>% group_by(series) %>% summarize(shrtfl_billions=sum(shrtfl_billions,na.rm=TRUE),paper=paper[1],forecast=forecast[1],forecast_num=forecast_num[1]) %>% arrange(forecast_num), aes(x = fct_inorder(forecast), y = shrtfl_billions, fill = paper))+
geom_col() +
facet_wrap(~paper) +
geom_hline(yintercept = 0)+
xlab("Data Used")+
ylab("Estimated Total Shortfall (Billions USD)") +
theme_classic()+
theme(legend.position="none")
ggplot(data = graph %>% group_by(series) %>% summarize(shrtfl_billions=sum(shrtfl_billions,na.rm=TRUE),paper=paper[1],forecast=forecast[1],forecast_num=forecast_num[1]) %>% arrange(forecast_num), aes(x = fct_inorder(forecast), y = shrtfl_billions, fill = paper))+
geom_col() +
facet_wrap(~paper) +
geom_hline(yintercept = 0)+
xlab("Data Used")+
ylab("Estimated Total Shortfall from Q1 2020 through Q4 2021\n(Billions USD)") +
theme_classic()+
theme(legend.position="none")
comp_graph = ggplot(data = graph %>% group_by(series) %>% summarize(shrtfl_billions=sum(shrtfl_billions,na.rm=TRUE),paper=paper[1],forecast=forecast[1],forecast_num=forecast_num[1]) %>% arrange(forecast_num), aes(x = fct_inorder(forecast), y = shrtfl_billions, fill = paper))+
geom_col() +
facet_wrap(~paper) +
geom_hline(yintercept = 0)+
xlab("Data Used")+
ylab("Estimated Total Shortfall from Q1 2020 through Q4 2021\n(Billions USD)") +
theme_classic()+
theme(legend.position="none")
comp_graph
ggsave(file = paste0(folder_output, "state quarterly comparison_20220630.png"), comp_graph, device = "png",width=6,height=4,units="in")
ggsave(file = paste0(folder, "Charts/tate quarterly comparison_20220630.png"), comp_graph, device = "png",width=6,height=4,units="in")
library(dynlm)
# Clemens and Veuger Estimates -------------------------------------------------
# assumed in Clemens and Veuger (2020)
salestax_elasticity <- 1.1
inctax_elasticity <- 1.6
# forecast growth in state gdp growth given the predicted series using ARIMA
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
armax_preds = bind_rows(armax_precovid,armax_postcovid)
View(armax_precovid)
crfb_data = haven::read_dta(paste0(data_folder,"Processing/muni_emp_panel_df.dta"))
View(crfb_data)
aid_data = crfb_data %>%
distinct(total_muni_aid_per_resident,state_abbrev) %>%
mutate(total_muni_aid_per_resident=as.numeric(total_muni_aid_per_resident))
View(aid_data)
View(shortfalls)
# assumed in Clemens and Veuger (2020)
salestax_elasticity <- 1.1
inctax_elasticity <- 1.6
# forecast growth in state gdp growth given the predicted series using ARIMA
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
armax_preds = bind_rows(armax_precovid,armax_postcovid)
dynlm((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange~L((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean,1:2))
d.arima <- stats::arima((armax_preds %>% filter(state=="AL"&date<="2020-04-01"))$predicted_mean,order=c(1,0,0))
autoplot(forecast::forecast(d.arima, h = 8))
forecasts = data.frame()
for(stat in state.abb){
d.arima <- stats::arima((armax_preds %>% filter(state==stat&date<="2020-04-01"))$predicted_mean,order=c(1,0,0))
df1 = data.frame(forecast=as.data.frame(forecast::forecast(d.arima, h = 6))[,1],state=stat,date=seq.Date(as.Date("2020-07-01"),by="3 months",length.out=6))
forecasts = bind_rows(forecasts,df1)
}
forecasts = bind_rows(forecasts,armax_preds %>% filter(date=="2020-01-01") %>% select(date,state,rgsp_yoy_pchange) %>% rename(forecast=rgsp_yoy_pchange))
forecasts = bind_rows(forecasts,armax_preds %>% filter(date=="2020-04-01") %>% select(date,state,predicted_mean) %>% rename(forecast=predicted_mean)) %>%
arrange(state,date)
# get state personal income at Q4 2019
pinc = read_csv(paste0(data_folder,"Raw/pinc_2019.csv"))
pinc$GeoName[3] = "Alaska"
pinc$GeoName[13] = "Hawaii"
pinc = pinc %>%
inner_join(data.frame(state_name=state.name,state=state.abb),by=c("GeoName"="state_name")) %>%
select(-c(GeoFips,GeoName)) %>%
pivot_longer(cols=`2018:Q1`:`2020:Q4`) %>%
mutate(date=as.Date(as.yearqtr(name,format="%Y:Q%q"))) %>%
full_join(forecasts) %>%
mutate(pinc_forecast=value,
pinc_shortfall=value) %>%
arrange(state,date) %>%
group_by(state) %>%
mutate(growth=(value[date=="2019-10-01"]/value[date=="2018-01-01"])^(1/8)) %>%
ungroup()
for(i in 1:nrow(pinc)){
pinc$pinc_forecast[i] = ifelse(pinc$date[i]>="2020-01-01",pinc$pinc_forecast[i-4]*(1+pinc$forecast[i]/100),pinc$pinc_forecast[i])
pinc$pinc_shortfall[i] = ifelse(pinc$date[i]>="2020-01-01",pinc$pinc_shortfall[i-1]*pinc$growth[i],pinc$pinc_shortfall[i])
}
pinc = pinc %>%
group_by(state) %>%
mutate(pinc_forecast_indx=pinc_forecast/pinc_forecast[date=="2019-10-01"],
pinc_shortfall_indx=pinc_shortfall/pinc_shortfall[date=='2019-10-01']) %>%
filter(date>="2020-01-01")
shortfalls <- pinc %>%
mutate(Period = gsub(" ","",as.character(as.yearqtr(date)))) %>%
select(state,Period,pinc_forecast_indx,pinc_shortfall_indx) %>%
mutate(pinc_shortfall=pinc_forecast_indx-pinc_shortfall_indx)
cv_state_calcs <- NULL
for(stat in state.abb){ #loop
growth <- state_data$nominalgrowthq42016toq42019[state_data$state_abbrv==stat]
pop <- state_data$pop17[state_data$state_abbrv==stat]
salestax_basepercap <- state_data$percap_sales[state_data$state_abbrv==stat]
inctax_basepercap <- state_data$percap_inctax[state_data$state_abbrv==stat]
state <- state_data$state_abbrv[state_data$state_abbrv==stat]
cv_est <- shortfalls %>% # percap ests
filter(state==stat) %>%
mutate(inctax_shortfall_percap = .25*inctax_elasticity*inctax_basepercap*growth*pinc_shortfall,
salestax_shortfall_percap = .25*salestax_elasticity*salestax_basepercap*growth*pinc_shortfall)
cv_est <- cv_est %>% # absolute estimates
mutate(inctax_shortfall = inctax_shortfall_percap * pop,
salestax_shortfall = salestax_shortfall_percap * pop)
cv_est <- cv_est %>% # ID info
mutate(state_abbrv = stat,
pop17 = pop)
cv_state_calcs <- bind_rows(cv_state_calcs, cv_est)
}
# sum by period
cv_tot_est <- cv_state_calcs %>%
group_by(Period) %>%
summarise(inctax_shortfall = sum(inctax_shortfall),
salestax_shortfall = sum(salestax_shortfall))
cv_tot_est <- cv_tot_est %>%
mutate(cvtax_shortfall = (inctax_shortfall + salestax_shortfall)/0.614)
# now scale up for state and local together (local component is just under 40% of state shortfall)
cv_tot_est <- cv_tot_est %>%
mutate(cvtax_shortfall = (cvtax_shortfall)*1.3964)
graph_add = cv_tot_est %>%
select(Period,cvtax_shortfall) %>%
rename(shortfall=cvtax_shortfall) %>%
mutate(order=5:12,
series="kearns_shortfall_jul20",
paper="Kearns (2022)",
forecst="July 2020",
shrtfl_billions=shortfall/1000000000,
forecast_num=4)
graph1 = bind_rows(graph,graph_add)
View(graph1)
ggplot(data = graph1, aes(x = order, y = shrtfl_billions, col = paper))+
geom_line()+
scale_color_manual(values = c("#FB0023", "#008CCC","green"), labels = c("Bartik (2020)", "Clemens and Veuger (2020b)","Kearns (2022)"), name = "Estimate")+
scale_x_continuous(breaks = c(6, 8, 10, 12, 14), labels = c("2020Q2", "2020Q4", "2021Q2", "2021Q4", "2022Q2"))+
geom_hline(yintercept = 0)+
xlab("")+
ylab("Estimated Shortfall (Billions USD)")+
theme_classic()+
guides(color = guide_legend(order = 1),linetype = guide_legend(order = 2))+
scale_y_continuous(breaks = c(0, -35, -70, -105, -140,-175,-210), labels = c("$0", "-$35", "-$70", "-$105", "-$140","-$175","-$210"))
## AS - Kearns Extension
## John Kearns
## 12/22/2022
library(dynlm)
# Clemens and Veuger Estimates -------------------------------------------------
# assumed in Clemens and Veuger (2020)
salestax_elasticity <- 1.1
inctax_elasticity <- 1.6
# forecast growth in state gdp growth given the predicted series using ARIMA
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
armax_preds = bind_rows(armax_precovid,armax_postcovid)
dynlm((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange~L((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean,1:2))
d.arima <- stats::arima((armax_preds %>% filter(state=="AL"&date<="2020-04-01"))$predicted_mean,order=c(1,0,0))
autoplot(forecast::forecast(d.arima, h = 8))
forecasts = data.frame()
for(stat in state.abb){
d.arima <- stats::arima((armax_preds %>% filter(state==stat&date<="2020-04-01"))$predicted_mean,order=c(1,0,0))
df1 = data.frame(forecast=as.data.frame(forecast::forecast(d.arima, h = 6))[,1],state=stat,date=seq.Date(as.Date("2020-07-01"),by="3 months",length.out=6))
forecasts = bind_rows(forecasts,df1)
}
forecasts = bind_rows(forecasts,armax_preds %>% filter(date=="2020-01-01") %>% select(date,state,rgsp_yoy_pchange) %>% rename(forecast=rgsp_yoy_pchange))
forecasts = bind_rows(forecasts,armax_preds %>% filter(date=="2020-04-01") %>% select(date,state,predicted_mean) %>% rename(forecast=predicted_mean)) %>%
arrange(state,date)
# get state personal income at Q4 2019
pinc = read_csv(paste0(data_folder,"Raw/pinc_2019.csv"))
pinc$GeoName[3] = "Alaska"
pinc$GeoName[13] = "Hawaii"
pinc = pinc %>%
inner_join(data.frame(state_name=state.name,state=state.abb),by=c("GeoName"="state_name")) %>%
select(-c(GeoFips,GeoName)) %>%
pivot_longer(cols=`2018:Q1`:`2020:Q4`) %>%
mutate(date=as.Date(as.yearqtr(name,format="%Y:Q%q"))) %>%
full_join(forecasts) %>%
mutate(pinc_forecast=value,
pinc_shortfall=value) %>%
arrange(state,date) %>%
group_by(state) %>%
mutate(growth=(value[date=="2019-10-01"]/value[date=="2018-01-01"])^(1/8)) %>%
ungroup()
for(i in 1:nrow(pinc)){
pinc$pinc_forecast[i] = ifelse(pinc$date[i]>="2020-01-01",pinc$pinc_forecast[i-4]*(1+pinc$forecast[i]/100),pinc$pinc_forecast[i])
pinc$pinc_shortfall[i] = ifelse(pinc$date[i]>="2020-01-01",pinc$pinc_shortfall[i-1]*pinc$growth[i],pinc$pinc_shortfall[i])
}
pinc = pinc %>%
group_by(state) %>%
mutate(pinc_forecast_indx=pinc_forecast/pinc_forecast[date=="2019-10-01"],
pinc_shortfall_indx=pinc_shortfall/pinc_shortfall[date=='2019-10-01']) %>%
filter(date>="2020-01-01")
shortfalls <- pinc %>%
mutate(Period = gsub(" ","",as.character(as.yearqtr(date)))) %>%
select(state,Period,pinc_forecast_indx,pinc_shortfall_indx) %>%
mutate(pinc_shortfall=pinc_forecast_indx-pinc_shortfall_indx)
cv_state_calcs <- NULL
for(stat in state.abb){ #loop
growth <- state_data$nominalgrowthq42016toq42019[state_data$state_abbrv==stat]
pop <- state_data$pop17[state_data$state_abbrv==stat]
salestax_basepercap <- state_data$percap_sales[state_data$state_abbrv==stat]
inctax_basepercap <- state_data$percap_inctax[state_data$state_abbrv==stat]
state <- state_data$state_abbrv[state_data$state_abbrv==stat]
cv_est <- shortfalls %>% # percap ests
filter(state==stat) %>%
mutate(inctax_shortfall_percap = .25*inctax_elasticity*inctax_basepercap*growth*pinc_shortfall,
salestax_shortfall_percap = .25*salestax_elasticity*salestax_basepercap*growth*pinc_shortfall)
cv_est <- cv_est %>% # absolute estimates
mutate(inctax_shortfall = inctax_shortfall_percap * pop,
salestax_shortfall = salestax_shortfall_percap * pop)
cv_est <- cv_est %>% # ID info
mutate(state_abbrv = stat,
pop17 = pop)
cv_state_calcs <- bind_rows(cv_state_calcs, cv_est)
}
# sum by period
cv_tot_est <- cv_state_calcs %>%
group_by(Period) %>%
summarise(inctax_shortfall = sum(inctax_shortfall),
salestax_shortfall = sum(salestax_shortfall))
cv_tot_est <- cv_tot_est %>%
mutate(cvtax_shortfall = (inctax_shortfall + salestax_shortfall)/0.614)
# now scale up for state and local together (local component is just under 40% of state shortfall)
cv_tot_est <- cv_tot_est %>%
mutate(cvtax_shortfall = (cvtax_shortfall)*1.3964)
graph_add = cv_tot_est %>%
select(Period,cvtax_shortfall) %>%
rename(shortfall=cvtax_shortfall) %>%
mutate(order=5:12,
series="kearns_shortfall_jul20",
paper="Kearns (2022)",
forecst="July 2020",
shrtfl_billions=shortfall/1000000000,
forecast_num=4)
graph1 = bind_rows(graph,graph_add)
comp_graph <- ggplot(data = graph1, aes(x = order, y = shrtfl_billions, col = paper))+
geom_line()+
scale_color_manual(values = c("#FB0023", "#008CCC","green"), labels = c("Bartik (2020)", "Clemens and Veuger (2020b)","Kearns (2022)"), name = "Estimate")+
scale_x_continuous(breaks = c(6, 8, 10, 12, 14), labels = c("2020Q2", "2020Q4", "2021Q2", "2021Q4", "2022Q2"))+
geom_hline(yintercept = 0)+
xlab("")+
ylab("Estimated Shortfall (Billions USD)")+
theme_classic()+
guides(color = guide_legend(order = 1),linetype = guide_legend(order = 2))+
scale_y_continuous(breaks = c(0, -35, -70, -105, -140,-175,-210), labels = c("$0", "-$35", "-$70", "-$105", "-$140","-$175","-$210"))
comp_graph
folder <- "C:/Users/16094/Documents/Year 1 - Princeton/Fall 2022/Fintech/Project/Fintech-Trends-and-State-and-Local-Finance/"
folder_data <- "C:/Users/16094/Documents/Year 1 - Princeton/Fall 2022/Fintech/Project/Fintech-Trends-and-State-and-Local-Finance/Data/"
#folder_output <- "J:/DataSets12/Kearns/Veuger/Automatic Stabilizers/Aspen Code/Output/"
# Packages ----------------------------------------------------------------------
library(tidyverse)
source(paste0(folder,"Do/AS 1 state pulls.R"))
source(paste0(folder,"Do/AS 2 clean and estimate.R"))
salestax_elasticity <- 1.1
inctax_elasticity <- 1.6
# forecast growth in state gdp growth given the predicted series using ARIMA
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
armax_preds = bind_rows(armax_precovid,armax_postcovid)
dynlm((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange~L((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean,1:2))
d.arima <- stats::arima((armax_preds %>% filter(state=="AL"&date<="2020-04-01"))$predicted_mean,order=c(1,0,0))
autoplot(forecast::forecast(d.arima, h = 8))
forecasts = data.frame()
for(stat in state.abb){
d.arima <- stats::arima((armax_preds %>% filter(state==stat&date<="2020-04-01"))$predicted_mean,order=c(1,0,0))
df1 = data.frame(forecast=as.data.frame(forecast::forecast(d.arima, h = 6))[,1],state=stat,date=seq.Date(as.Date("2020-07-01"),by="3 months",length.out=6))
forecasts = bind_rows(forecasts,df1)
}
forecasts = bind_rows(forecasts,armax_preds %>% filter(date=="2020-01-01") %>% select(date,state,rgsp_yoy_pchange) %>% rename(forecast=rgsp_yoy_pchange))
forecasts = bind_rows(forecasts,armax_preds %>% filter(date=="2020-04-01") %>% select(date,state,predicted_mean) %>% rename(forecast=predicted_mean)) %>%
arrange(state,date)
# get state personal income at Q4 2019
pinc = read_csv(paste0(data_folder,"Raw/pinc_2019.csv"))
pinc$GeoName[3] = "Alaska"
pinc$GeoName[13] = "Hawaii"
pinc = pinc %>%
inner_join(data.frame(state_name=state.name,state=state.abb),by=c("GeoName"="state_name")) %>%
select(-c(GeoFips,GeoName)) %>%
pivot_longer(cols=`2018:Q1`:`2020:Q4`) %>%
mutate(date=as.Date(as.yearqtr(name,format="%Y:Q%q"))) %>%
full_join(forecasts) %>%
mutate(pinc_forecast=value,
pinc_shortfall=value) %>%
arrange(state,date) %>%
group_by(state) %>%
mutate(growth=(value[date=="2019-10-01"]/value[date=="2018-01-01"])^(1/8)) %>%
ungroup()
for(i in 1:nrow(pinc)){
pinc$pinc_forecast[i] = ifelse(pinc$date[i]>="2020-01-01",pinc$pinc_forecast[i-4]*(1+pinc$forecast[i]/100),pinc$pinc_forecast[i])
pinc$pinc_shortfall[i] = ifelse(pinc$date[i]>="2020-01-01",pinc$pinc_shortfall[i-1]*pinc$growth[i],pinc$pinc_shortfall[i])
}
pinc = pinc %>%
group_by(state) %>%
mutate(pinc_forecast_indx=pinc_forecast/pinc_forecast[date=="2019-10-01"],
pinc_shortfall_indx=pinc_shortfall/pinc_shortfall[date=='2019-10-01']) %>%
filter(date>="2020-01-01")
shortfalls <- pinc %>%
mutate(Period = gsub(" ","",as.character(as.yearqtr(date)))) %>%
select(state,Period,pinc_forecast_indx,pinc_shortfall_indx) %>%
mutate(pinc_shortfall=pinc_forecast_indx-pinc_shortfall_indx)
cv_state_calcs <- NULL
for(stat in state.abb){ #loop
growth <- state_data$nominalgrowthq42016toq42019[state_data$state_abbrv==stat]
pop <- state_data$pop17[state_data$state_abbrv==stat]
salestax_basepercap <- state_data$percap_sales[state_data$state_abbrv==stat]
inctax_basepercap <- state_data$percap_inctax[state_data$state_abbrv==stat]
state <- state_data$state_abbrv[state_data$state_abbrv==stat]
cv_est <- shortfalls %>% # percap ests
filter(state==stat) %>%
mutate(inctax_shortfall_percap = .25*inctax_elasticity*inctax_basepercap*growth*pinc_shortfall,
salestax_shortfall_percap = .25*salestax_elasticity*salestax_basepercap*growth*pinc_shortfall)
cv_est <- cv_est %>% # absolute estimates
mutate(inctax_shortfall = inctax_shortfall_percap * pop,
salestax_shortfall = salestax_shortfall_percap * pop)
cv_est <- cv_est %>% # ID info
mutate(state_abbrv = stat,
pop17 = pop)
cv_state_calcs <- bind_rows(cv_state_calcs, cv_est)
}
# sum by period
cv_tot_est <- cv_state_calcs %>%
group_by(Period) %>%
summarise(inctax_shortfall = sum(inctax_shortfall),
salestax_shortfall = sum(salestax_shortfall))
cv_tot_est <- cv_tot_est %>%
mutate(cvtax_shortfall = (inctax_shortfall + salestax_shortfall)/0.614)
# now scale up for state and local together (local component is just under 40% of state shortfall)
cv_tot_est <- cv_tot_est %>%
mutate(cvtax_shortfall = (cvtax_shortfall)*1.3964)
graph_add = cv_tot_est %>%
select(Period,cvtax_shortfall) %>%
rename(shortfall=cvtax_shortfall) %>%
mutate(order=5:12,
series="kearns_shortfall_jul20",
paper="Kearns (2022)",
forecst="July 2020",
shrtfl_billions=shortfall/1000000000,
forecast_num=4)
graph1 = bind_rows(graph,graph_add)
comp_graph <- ggplot(data = graph1, aes(x = order, y = shrtfl_billions, col = paper))+
geom_line()+
scale_color_manual(values = c("#FB0023", "#008CCC","green"), labels = c("Bartik (2020)", "Clemens and Veuger (2020b)","Kearns (2022)"), name = "Estimate")+
scale_x_continuous(breaks = c(6, 8, 10, 12, 14), labels = c("2020Q2", "2020Q4", "2021Q2", "2021Q4", "2022Q2"))+
geom_hline(yintercept = 0)+
xlab("")+
ylab("Estimated Shortfall (Billions USD)")+
theme_classic()+
guides(color = guide_legend(order = 1),linetype = guide_legend(order = 2))+
scale_y_continuous(breaks = c(0, -35, -70, -105, -140,-175,-210), labels = c("$0", "-$35", "-$70", "-$105", "-$140","-$175","-$210"))
comp_graph
graph1 %>% filter(order<13) %>% group_by(paper) %>% summarize(shortfall=sum(shrtfl_billions))
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
armax_preds = bind_rows(armax_precovid,armax_postcovid)
armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))
armax_preds %>% filter(state=="NJ"&date<"2020-01-01")
dynlm((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange~L((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean,1:2))
(armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange
(armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean,1:2)
(armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean)
(armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean
dynlm((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange~L((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean))
dynlm((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$rgsp_yoy_pchange~L((armax_preds %>% filter(state=="NJ"&date<"2020-01-01"))$predicted_mean),1:2)
View(cv_tot_est)
library(tidyverse)
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
library(tidyverse)
master_dir = "C:/Users/16094/Documents/Year 1 - Princeton/Fall 2022/Fintech/Project/Fintech-Trends-and-State-and-Local-Finance/"
do_folder = paste0(master_dir,"Do/")
data_folder = paste0(master_dir,"Data/")
results_folder = paste0(master_dir,"Results/")
charts_folder = paste0(master_dir,"Charts/")
armax_precovid = read_csv(paste0(data_folder,"Final/armax_precovid.csv"))
armax_postcovid = read_csv(paste0(data_folder,"Final/armax_postcovid.csv"))
View(armax_postcovid)
View(armax_precovid)
